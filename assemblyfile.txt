# MIPS assembly file

LW $r1, 4($sp)		# load value from sp + 4 into r1;
LW $r2, 8($sp)		# load value from sp + 8 into r2;
LW $r3, 12($sp)		# load value from sp + 12 into r3;
NOP

LW $r4, 16($sp)		# load value from sp + 16 into r4;
LW $r5, 20($sp)		# load value from sp + 20 into r5;
LW $r6, 24($sp)		# load value from sp + 24 into r6;
NOP

ADD $r7, $r1, $r2	# r7 = value r1 +  value r2
ADDI $r8, $r3, 13	# r8 = value r3 + 13
SUB $r9, $r3, $r4	# r9 = value r3 - value r4
MUL $r10, $r5, $r6	# r10 = value r5 * value r6
NOP

AND $r11, $r7, $r8	# r11 = bitwise AND operation of value r7 and value r8
OR $r12, $r7, $r8	# r12 = bitwise OR operation of value r7 and value r8
SLL $r13, $r11, 4	# r13 = value r11 shifted left by 4 (multiplied by 2^4 = 16)		
SRL $r14, $r12, 2	# r14 = value r12 shifted right by 2 (int division by 2^2 = 4)
NOP

J 4			# Jump to instruction
AND $r20, $r7, $r8	# r20 = bitwise AND operation of value r7 and value r8
OR $r20, $r7, $r8	# r20 = bitwise OR operation of value r7 and value r8
SLL $r21, $r11, 4	# r21 = value r11 shifted left by 4 (multiplied by 2^4 = 16)		

BEQ $r1, $r2, 3		# If value r1 == value r2, jump to instruction
BEQ $r20, $r21, 3	# If value r20 == value r21, jump to instruction
SW $r1, 4($sp)		# Store value r1 into memory address sp + 4 
SW $r2, 8($sp)		# Store value r2 into memory address sp + 8 	
SW $r3, 12($sp)		# Store value r3 into memory address sp + 12 
SW $r4, 16($sp)		# Store value r4 into memory address sp + 16
SW $r5, 20($sp)		# Store value r5 into memory address sp + 20 
SW $r6, 24($sp)		# Store value r6 into memory address sp + 24 
SW $r7, 28($sp)		# Store value r7 into memory address sp + 28 
SW $r8, 32($sp)		# Store value r8 into memory address sp + 32 


# End of file